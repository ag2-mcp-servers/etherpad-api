# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T19:00:25+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Query

from models import (
    AppendChatMessageGetResponse,
    AppendChatMessageGetResponse1,
    AppendChatMessageGetResponse2,
    AppendChatMessageGetResponse3,
    AppendChatMessagePostResponse,
    AppendChatMessagePostResponse1,
    AppendChatMessagePostResponse2,
    AppendChatMessagePostResponse3,
    AppendTextGetResponse,
    AppendTextGetResponse1,
    AppendTextGetResponse2,
    AppendTextGetResponse3,
    AppendTextPostResponse,
    AppendTextPostResponse1,
    AppendTextPostResponse2,
    AppendTextPostResponse3,
    CheckTokenGetResponse,
    CheckTokenGetResponse1,
    CheckTokenGetResponse2,
    CheckTokenGetResponse3,
    CheckTokenPostResponse,
    CheckTokenPostResponse1,
    CheckTokenPostResponse2,
    CheckTokenPostResponse3,
    CopyPadGetResponse,
    CopyPadGetResponse1,
    CopyPadGetResponse2,
    CopyPadGetResponse3,
    CopyPadPostResponse,
    CopyPadPostResponse1,
    CopyPadPostResponse2,
    CopyPadPostResponse3,
    CopyPadWithoutHistoryGetResponse,
    CopyPadWithoutHistoryGetResponse1,
    CopyPadWithoutHistoryGetResponse2,
    CopyPadWithoutHistoryGetResponse3,
    CopyPadWithoutHistoryPostResponse,
    CopyPadWithoutHistoryPostResponse1,
    CopyPadWithoutHistoryPostResponse2,
    CopyPadWithoutHistoryPostResponse3,
    CreateAuthorGetResponse,
    CreateAuthorGetResponse1,
    CreateAuthorGetResponse2,
    CreateAuthorGetResponse3,
    CreateAuthorIfNotExistsForGetResponse,
    CreateAuthorIfNotExistsForGetResponse1,
    CreateAuthorIfNotExistsForGetResponse2,
    CreateAuthorIfNotExistsForGetResponse3,
    CreateAuthorIfNotExistsForPostResponse,
    CreateAuthorIfNotExistsForPostResponse1,
    CreateAuthorIfNotExistsForPostResponse2,
    CreateAuthorIfNotExistsForPostResponse3,
    CreateAuthorPostResponse,
    CreateAuthorPostResponse1,
    CreateAuthorPostResponse2,
    CreateAuthorPostResponse3,
    CreateDiffHTMLGetResponse,
    CreateDiffHTMLGetResponse1,
    CreateDiffHTMLGetResponse2,
    CreateDiffHTMLGetResponse3,
    CreateDiffHTMLPostResponse,
    CreateDiffHTMLPostResponse1,
    CreateDiffHTMLPostResponse2,
    CreateDiffHTMLPostResponse3,
    CreateGroupGetResponse,
    CreateGroupGetResponse1,
    CreateGroupGetResponse2,
    CreateGroupGetResponse3,
    CreateGroupIfNotExistsForGetResponse,
    CreateGroupIfNotExistsForGetResponse1,
    CreateGroupIfNotExistsForGetResponse2,
    CreateGroupIfNotExistsForGetResponse3,
    CreateGroupIfNotExistsForPostResponse,
    CreateGroupIfNotExistsForPostResponse1,
    CreateGroupIfNotExistsForPostResponse2,
    CreateGroupIfNotExistsForPostResponse3,
    CreateGroupPadGetResponse,
    CreateGroupPadGetResponse1,
    CreateGroupPadGetResponse2,
    CreateGroupPadGetResponse3,
    CreateGroupPadPostResponse,
    CreateGroupPadPostResponse1,
    CreateGroupPadPostResponse2,
    CreateGroupPadPostResponse3,
    CreateGroupPostResponse,
    CreateGroupPostResponse1,
    CreateGroupPostResponse2,
    CreateGroupPostResponse3,
    CreatePadGetResponse,
    CreatePadGetResponse1,
    CreatePadGetResponse2,
    CreatePadGetResponse3,
    CreatePadPostResponse,
    CreatePadPostResponse1,
    CreatePadPostResponse2,
    CreatePadPostResponse3,
    CreateSessionGetResponse,
    CreateSessionGetResponse1,
    CreateSessionGetResponse2,
    CreateSessionGetResponse3,
    CreateSessionPostResponse,
    CreateSessionPostResponse1,
    CreateSessionPostResponse2,
    CreateSessionPostResponse3,
    DeleteGroupGetResponse,
    DeleteGroupGetResponse1,
    DeleteGroupGetResponse2,
    DeleteGroupGetResponse3,
    DeleteGroupPostResponse,
    DeleteGroupPostResponse1,
    DeleteGroupPostResponse2,
    DeleteGroupPostResponse3,
    DeletePadGetResponse,
    DeletePadGetResponse1,
    DeletePadGetResponse2,
    DeletePadGetResponse3,
    DeletePadPostResponse,
    DeletePadPostResponse1,
    DeletePadPostResponse2,
    DeletePadPostResponse3,
    DeleteSessionGetResponse,
    DeleteSessionGetResponse1,
    DeleteSessionGetResponse2,
    DeleteSessionGetResponse3,
    DeleteSessionPostResponse,
    DeleteSessionPostResponse1,
    DeleteSessionPostResponse2,
    DeleteSessionPostResponse3,
    GetAttributePoolGetResponse,
    GetAttributePoolGetResponse1,
    GetAttributePoolGetResponse2,
    GetAttributePoolGetResponse3,
    GetAttributePoolPostResponse,
    GetAttributePoolPostResponse1,
    GetAttributePoolPostResponse2,
    GetAttributePoolPostResponse3,
    GetAuthorNameGetResponse,
    GetAuthorNameGetResponse1,
    GetAuthorNameGetResponse2,
    GetAuthorNameGetResponse3,
    GetAuthorNamePostResponse,
    GetAuthorNamePostResponse1,
    GetAuthorNamePostResponse2,
    GetAuthorNamePostResponse3,
    GetChatHeadGetResponse,
    GetChatHeadGetResponse1,
    GetChatHeadGetResponse2,
    GetChatHeadGetResponse3,
    GetChatHeadPostResponse,
    GetChatHeadPostResponse1,
    GetChatHeadPostResponse2,
    GetChatHeadPostResponse3,
    GetChatHistoryGetResponse,
    GetChatHistoryGetResponse1,
    GetChatHistoryGetResponse2,
    GetChatHistoryGetResponse3,
    GetChatHistoryPostResponse,
    GetChatHistoryPostResponse1,
    GetChatHistoryPostResponse2,
    GetChatHistoryPostResponse3,
    GetHTMLGetResponse,
    GetHTMLGetResponse1,
    GetHTMLGetResponse2,
    GetHTMLGetResponse3,
    GetHTMLPostResponse,
    GetHTMLPostResponse1,
    GetHTMLPostResponse2,
    GetHTMLPostResponse3,
    GetLastEditedGetResponse,
    GetLastEditedGetResponse1,
    GetLastEditedGetResponse2,
    GetLastEditedGetResponse3,
    GetLastEditedPostResponse,
    GetLastEditedPostResponse1,
    GetLastEditedPostResponse2,
    GetLastEditedPostResponse3,
    GetPadIDGetResponse,
    GetPadIDGetResponse1,
    GetPadIDGetResponse2,
    GetPadIDGetResponse3,
    GetPadIDPostResponse,
    GetPadIDPostResponse1,
    GetPadIDPostResponse2,
    GetPadIDPostResponse3,
    GetPublicStatusGetResponse,
    GetPublicStatusGetResponse1,
    GetPublicStatusGetResponse2,
    GetPublicStatusGetResponse3,
    GetPublicStatusPostResponse,
    GetPublicStatusPostResponse1,
    GetPublicStatusPostResponse2,
    GetPublicStatusPostResponse3,
    GetReadOnlyIDGetResponse,
    GetReadOnlyIDGetResponse1,
    GetReadOnlyIDGetResponse2,
    GetReadOnlyIDGetResponse3,
    GetReadOnlyIDPostResponse,
    GetReadOnlyIDPostResponse1,
    GetReadOnlyIDPostResponse2,
    GetReadOnlyIDPostResponse3,
    GetRevisionChangesetGetResponse,
    GetRevisionChangesetGetResponse1,
    GetRevisionChangesetGetResponse2,
    GetRevisionChangesetGetResponse3,
    GetRevisionChangesetPostResponse,
    GetRevisionChangesetPostResponse1,
    GetRevisionChangesetPostResponse2,
    GetRevisionChangesetPostResponse3,
    GetRevisionsCountGetResponse,
    GetRevisionsCountGetResponse1,
    GetRevisionsCountGetResponse2,
    GetRevisionsCountGetResponse3,
    GetRevisionsCountPostResponse,
    GetRevisionsCountPostResponse1,
    GetRevisionsCountPostResponse2,
    GetRevisionsCountPostResponse3,
    GetSavedRevisionsCountGetResponse,
    GetSavedRevisionsCountGetResponse1,
    GetSavedRevisionsCountGetResponse2,
    GetSavedRevisionsCountGetResponse3,
    GetSavedRevisionsCountPostResponse,
    GetSavedRevisionsCountPostResponse1,
    GetSavedRevisionsCountPostResponse2,
    GetSavedRevisionsCountPostResponse3,
    GetSessionInfoGetResponse,
    GetSessionInfoGetResponse1,
    GetSessionInfoGetResponse2,
    GetSessionInfoGetResponse3,
    GetSessionInfoPostResponse,
    GetSessionInfoPostResponse1,
    GetSessionInfoPostResponse2,
    GetSessionInfoPostResponse3,
    GetStatsGetResponse,
    GetStatsGetResponse1,
    GetStatsGetResponse2,
    GetStatsGetResponse3,
    GetStatsPostResponse,
    GetStatsPostResponse1,
    GetStatsPostResponse2,
    GetStatsPostResponse3,
    GetTextGetResponse,
    GetTextGetResponse1,
    GetTextGetResponse2,
    GetTextGetResponse3,
    GetTextPostResponse,
    GetTextPostResponse1,
    GetTextPostResponse2,
    GetTextPostResponse3,
    ListAllGroupsGetResponse,
    ListAllGroupsGetResponse1,
    ListAllGroupsGetResponse2,
    ListAllGroupsGetResponse3,
    ListAllGroupsPostResponse,
    ListAllGroupsPostResponse1,
    ListAllGroupsPostResponse2,
    ListAllGroupsPostResponse3,
    ListAllPadsGetResponse,
    ListAllPadsGetResponse1,
    ListAllPadsGetResponse2,
    ListAllPadsGetResponse3,
    ListAllPadsPostResponse,
    ListAllPadsPostResponse1,
    ListAllPadsPostResponse2,
    ListAllPadsPostResponse3,
    ListAuthorsOfPadGetResponse,
    ListAuthorsOfPadGetResponse1,
    ListAuthorsOfPadGetResponse2,
    ListAuthorsOfPadGetResponse3,
    ListAuthorsOfPadPostResponse,
    ListAuthorsOfPadPostResponse1,
    ListAuthorsOfPadPostResponse2,
    ListAuthorsOfPadPostResponse3,
    ListPadsGetResponse,
    ListPadsGetResponse1,
    ListPadsGetResponse2,
    ListPadsGetResponse3,
    ListPadsOfAuthorGetResponse,
    ListPadsOfAuthorGetResponse1,
    ListPadsOfAuthorGetResponse2,
    ListPadsOfAuthorGetResponse3,
    ListPadsOfAuthorPostResponse,
    ListPadsOfAuthorPostResponse1,
    ListPadsOfAuthorPostResponse2,
    ListPadsOfAuthorPostResponse3,
    ListPadsPostResponse,
    ListPadsPostResponse1,
    ListPadsPostResponse2,
    ListPadsPostResponse3,
    ListSavedRevisionsGetResponse,
    ListSavedRevisionsGetResponse1,
    ListSavedRevisionsGetResponse2,
    ListSavedRevisionsGetResponse3,
    ListSavedRevisionsPostResponse,
    ListSavedRevisionsPostResponse1,
    ListSavedRevisionsPostResponse2,
    ListSavedRevisionsPostResponse3,
    ListSessionsOfAuthorGetResponse,
    ListSessionsOfAuthorGetResponse1,
    ListSessionsOfAuthorGetResponse2,
    ListSessionsOfAuthorGetResponse3,
    ListSessionsOfAuthorPostResponse,
    ListSessionsOfAuthorPostResponse1,
    ListSessionsOfAuthorPostResponse2,
    ListSessionsOfAuthorPostResponse3,
    ListSessionsOfGroupGetResponse,
    ListSessionsOfGroupGetResponse1,
    ListSessionsOfGroupGetResponse2,
    ListSessionsOfGroupGetResponse3,
    ListSessionsOfGroupPostResponse,
    ListSessionsOfGroupPostResponse1,
    ListSessionsOfGroupPostResponse2,
    ListSessionsOfGroupPostResponse3,
    MovePadGetResponse,
    MovePadGetResponse1,
    MovePadGetResponse2,
    MovePadGetResponse3,
    MovePadPostResponse,
    MovePadPostResponse1,
    MovePadPostResponse2,
    MovePadPostResponse3,
    PadUsersCountGetResponse,
    PadUsersCountGetResponse1,
    PadUsersCountGetResponse2,
    PadUsersCountGetResponse3,
    PadUsersCountPostResponse,
    PadUsersCountPostResponse1,
    PadUsersCountPostResponse2,
    PadUsersCountPostResponse3,
    PadUsersGetResponse,
    PadUsersGetResponse1,
    PadUsersGetResponse2,
    PadUsersGetResponse3,
    PadUsersPostResponse,
    PadUsersPostResponse1,
    PadUsersPostResponse2,
    PadUsersPostResponse3,
    RestoreRevisionGetResponse,
    RestoreRevisionGetResponse1,
    RestoreRevisionGetResponse2,
    RestoreRevisionGetResponse3,
    RestoreRevisionPostResponse,
    RestoreRevisionPostResponse1,
    RestoreRevisionPostResponse2,
    RestoreRevisionPostResponse3,
    SaveRevisionGetResponse,
    SaveRevisionGetResponse1,
    SaveRevisionGetResponse2,
    SaveRevisionGetResponse3,
    SaveRevisionPostResponse,
    SaveRevisionPostResponse1,
    SaveRevisionPostResponse2,
    SaveRevisionPostResponse3,
    SendClientsMessageGetResponse,
    SendClientsMessageGetResponse1,
    SendClientsMessageGetResponse2,
    SendClientsMessageGetResponse3,
    SendClientsMessagePostResponse,
    SendClientsMessagePostResponse1,
    SendClientsMessagePostResponse2,
    SendClientsMessagePostResponse3,
    SetHTMLGetResponse,
    SetHTMLGetResponse1,
    SetHTMLGetResponse2,
    SetHTMLGetResponse3,
    SetHTMLPostResponse,
    SetHTMLPostResponse1,
    SetHTMLPostResponse2,
    SetHTMLPostResponse3,
    SetPublicStatusGetResponse,
    SetPublicStatusGetResponse1,
    SetPublicStatusGetResponse2,
    SetPublicStatusGetResponse3,
    SetPublicStatusPostResponse,
    SetPublicStatusPostResponse1,
    SetPublicStatusPostResponse2,
    SetPublicStatusPostResponse3,
    SetTextGetResponse,
    SetTextGetResponse1,
    SetTextGetResponse2,
    SetTextGetResponse3,
    SetTextPostResponse,
    SetTextPostResponse1,
    SetTextPostResponse2,
    SetTextPostResponse3,
)

app = MCPProxy(
    contact={
        'email': 'support@example.com',
        'name': 'The Etherpad Foundation',
        'url': 'https://etherpad.org/',
    },
    description='Etherpad is a real-time collaborative editor scalable to thousands of simultaneous real time users. It provides full data export capabilities, and runs on your server, under your control.',
    license={
        'name': 'Apache 2.0',
        'url': 'https://www.apache.org/licenses/LICENSE-2.0.html',
    },
    termsOfService='https://etherpad.org/',
    title='Etherpad API',
    version='1.2.15',
    servers=[
        {'url': 'http://etherpad.local'},
        {'url': 'http://pads.mro.name/api/1.2.15'},
    ],
)


@app.get(
    '/appendChatMessage',
    tags=['chat_message_handling', 'pad_management', 'author_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def append_chat_message_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    text: Optional[str] = None,
    author_i_d: Optional[str] = Query(None, alias='authorID'),
    time: Optional[str] = None,
):
    """
    appends a chat message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/appendChatMessage',
    tags=['chat_message_handling', 'pad_management', 'author_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def append_chat_message_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    text: Optional[str] = None,
    author_i_d: Optional[str] = Query(None, alias='authorID'),
    time: Optional[str] = None,
):
    """
    appends a chat message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/appendText',
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def append_text_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/appendText',
    tags=['pad_management', 'pad_attribute_access', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def append_text_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/checkToken',
    tags=['token_validation'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def check_token_using_g_e_t():
    """
    returns ok when the current api token is valid
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/checkToken',
    tags=['token_validation'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def check_token_using_p_o_s_t():
    """
    returns ok when the current api token is valid
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/copyPad',
    tags=['pad_management', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def copy_pad_using_g_e_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/copyPad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def copy_pad_using_p_o_s_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/copyPadWithoutHistory',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def copy_pad_without_history_using_g_e_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/copyPadWithoutHistory',
    tags=['pad_management', 'pad_sessions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def copy_pad_without_history_using_p_o_s_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createAuthor',
    tags=['author_management', 'author_information'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_author_using_g_e_t(name: Optional[str] = None):
    """
    creates a new author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createAuthor',
    tags=['author_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_author_using_p_o_s_t(name: Optional[str] = None):
    """
    creates a new author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createAuthorIfNotExistsFor',
    tags=['author_management', 'author_information'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_author_if_not_exists_for_using_g_e_t(
    author_mapper: Optional[str] = Query(None, alias='authorMapper'),
    name: Optional[str] = None,
):
    """
    this functions helps you to map your application author ids to Etherpad author ids
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createAuthorIfNotExistsFor',
    tags=['author_management', 'author_information'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_author_if_not_exists_for_using_p_o_s_t(
    author_mapper: Optional[str] = Query(None, alias='authorMapper'),
    name: Optional[str] = None,
):
    """
    this functions helps you to map your application author ids to Etherpad author ids
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createDiffHTML',
    tags=['pad_management', 'pad_revision_handling', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_diff_h_t_m_l_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    start_rev: Optional[str] = Query(None, alias='startRev'),
    end_rev: Optional[str] = Query(None, alias='endRev'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createDiffHTML',
    tags=['pad_management', 'pad_revision_handling', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_diff_h_t_m_l_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    start_rev: Optional[str] = Query(None, alias='startRev'),
    end_rev: Optional[str] = Query(None, alias='endRev'),
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createGroup',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_using_g_e_t():
    """
    creates a new group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createGroup',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_using_p_o_s_t():
    """
    creates a new group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createGroupIfNotExistsFor',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_if_not_exists_for_using_g_e_t(
    group_mapper: Optional[str] = Query(None, alias='groupMapper')
):
    """
    this functions helps you to map your application group ids to Etherpad group ids
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createGroupIfNotExistsFor',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_if_not_exists_for_using_p_o_s_t(
    group_mapper: Optional[str] = Query(None, alias='groupMapper')
):
    """
    this functions helps you to map your application group ids to Etherpad group ids
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createGroupPad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_pad_using_g_e_t(
    group_i_d: Optional[str] = Query(None, alias='groupID'),
    pad_name: Optional[str] = Query(None, alias='padName'),
    text: Optional[str] = None,
):
    """
    creates a new pad in this group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createGroupPad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_group_pad_using_p_o_s_t(
    group_i_d: Optional[str] = Query(None, alias='groupID'),
    pad_name: Optional[str] = Query(None, alias='padName'),
    text: Optional[str] = None,
):
    """
    creates a new pad in this group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createPad',
    description=""" creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad """,
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_pad_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createPad',
    description=""" creates a new (non-group) pad. Note that if you need to create a group Pad, you should call createGroupPad """,
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_pad_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/createSession',
    tags=['session_management', 'pad_sessions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_session_using_g_e_t(
    group_i_d: Optional[str] = Query(None, alias='groupID'),
    author_i_d: Optional[str] = Query(None, alias='authorID'),
    valid_until: Optional[str] = Query(None, alias='validUntil'),
):
    """
    creates a new session. validUntil is an unix timestamp in seconds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/createSession',
    tags=['session_management', 'author_management', 'group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def create_session_using_p_o_s_t(
    group_i_d: Optional[str] = Query(None, alias='groupID'),
    author_i_d: Optional[str] = Query(None, alias='authorID'),
    valid_until: Optional[str] = Query(None, alias='validUntil'),
):
    """
    creates a new session. validUntil is an unix timestamp in seconds
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deleteGroup',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_group_using_g_e_t(group_i_d: Optional[str] = Query(None, alias='groupID')):
    """
    deletes a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/deleteGroup',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_group_using_p_o_s_t(group_i_d: Optional[str] = Query(None, alias='groupID')):
    """
    deletes a group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deletePad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_pad_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    deletes a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/deletePad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_pad_using_p_o_s_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    deletes a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/deleteSession',
    tags=['session_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_session_using_g_e_t(
    session_i_d: Optional[str] = Query(None, alias='sessionID')
):
    """
    deletes a session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/deleteSession',
    tags=['session_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def delete_session_using_p_o_s_t(
    session_i_d: Optional[str] = Query(None, alias='sessionID')
):
    """
    deletes a session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getAttributePool',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_attribute_pool_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getAttributePool',
    tags=['pad_management', 'pad_information_retrieval', 'pad_attribute_access'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_attribute_pool_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getAuthorName',
    tags=['author_management', 'author_information'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_author_name_using_g_e_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    Returns the Author Name of the author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getAuthorName',
    tags=['author_management', 'author_information', 'pad_authorship'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_author_name_using_p_o_s_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    Returns the Author Name of the author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getChatHead',
    tags=['pad_attribute_access', 'pad_information_retrieval', 'chat_message_handling'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_chat_head_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the chatHead (chat-message) of the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getChatHead',
    tags=['pad_attribute_access', 'chat_message_handling'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_chat_head_using_p_o_s_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the chatHead (chat-message) of the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getChatHistory',
    tags=['pad_attribute_access', 'chat_message_handling'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_chat_history_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    start: Optional[str] = None,
    end: Optional[str] = None,
):
    """
    returns the chat history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getChatHistory',
    tags=['chat_message_handling', 'pad_management', 'pad_attribute_access'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_chat_history_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    start: Optional[str] = None,
    end: Optional[str] = None,
):
    """
    returns the chat history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getHTML',
    tags=['pad_text_retrieval', 'pad_text_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_h_t_m_l_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    """
    returns the text of a pad formatted as HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getHTML',
    tags=['pad_text_retrieval', 'pad_text_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_h_t_m_l_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    """
    returns the text of a pad formatted as HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getLastEdited',
    tags=['pad_management', 'pad_revision_handling', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_last_edited_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the timestamp of the last revision of the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getLastEdited',
    tags=['pad_management', 'pad_revision_handling'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_last_edited_using_p_o_s_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the timestamp of the last revision of the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPadID',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_pad_i_d_using_g_e_t(ro_i_d: Optional[str] = Query(None, alias='roID')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getPadID',
    tags=['pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_pad_i_d_using_p_o_s_t(ro_i_d: Optional[str] = Query(None, alias='roID')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getPublicStatus',
    tags=['pad_management', 'token_validation'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_public_status_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    return true of false
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getPublicStatus',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_public_status_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    return true of false
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getReadOnlyID',
    tags=['pad_information_retrieval', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_read_only_i_d_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the read only link of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getReadOnlyID',
    tags=['pad_information_retrieval', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_read_only_i_d_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    returns the read only link of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRevisionChangeset',
    tags=['pad_management', 'pad_revision_handling', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_revision_changeset_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getRevisionChangeset',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_revision_changeset_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getRevisionsCount',
    tags=['pad_revision_handling', 'pad_management', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_revisions_count_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    returns the number of revisions of this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getRevisionsCount',
    tags=['pad_revision_handling', 'pad_revisions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_revisions_count_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    returns the number of revisions of this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getSavedRevisionsCount',
    tags=['pad_management', 'pad_information_retrieval', 'pad_authorship'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_saved_revisions_count_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getSavedRevisionsCount',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_saved_revisions_count_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getSessionInfo',
    tags=['session_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_session_info_using_g_e_t(
    session_i_d: Optional[str] = Query(None, alias='sessionID')
):
    """
    returns informations about a session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getSessionInfo',
    tags=['session_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_session_info_using_p_o_s_t(
    session_i_d: Optional[str] = Query(None, alias='sessionID')
):
    """
    returns informations about a session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getStats',
    tags=[
        'pad_management',
        'session_management',
        'token_validation',
        'pad_information_retrieval',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_stats_using_g_e_t():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getStats',
    tags=[
        'chat_message_handling',
        'pad_management',
        'author_management',
        'group_management',
        'session_management',
        'token_validation',
        'diff_creation',
        'pad_attribute_access',
        'author_information',
        'pad_revision_handling',
        'pad_information_retrieval',
        'pad_text_retrieval',
        'group_and_author_pads',
        'pad_authorship',
        'pad_sessions',
        'pad_users',
        'pad_revisions',
        'client_messages',
        'pad_text_management',
        'pad_public_status_management',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_stats_using_p_o_s_t():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/getText',
    tags=['pad_text_retrieval', 'pad_information_retrieval', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_text_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    """
    returns the text of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/getText',
    tags=['pad_text_retrieval', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def get_text_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    """
    returns the text of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listAllGroups',
    tags=[
        'pad_management',
        'pad_revision_handling',
        'pad_text_management',
        'pad_information_retrieval',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_all_groups_using_g_e_t():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listAllGroups',
    tags=[
        'pad_management',
        'pad_revision_handling',
        'pad_information_retrieval',
        'pad_revisions',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_all_groups_using_p_o_s_t():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listAllPads',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_all_pads_using_g_e_t():
    """
    list all the pads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listAllPads',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_all_pads_using_p_o_s_t():
    """
    list all the pads
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listAuthorsOfPad',
    tags=['author_management', 'pad_authorship'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_authors_of_pad_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    returns an array of authors who contributed to this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listAuthorsOfPad',
    tags=['pad_authorship', 'author_management', 'author_information'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_authors_of_pad_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    """
    returns an array of authors who contributed to this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listPads',
    tags=['pad_management', 'group_and_author_pads'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_pads_using_g_e_t(group_i_d: Optional[str] = Query(None, alias='groupID')):
    """
    returns all pads of this group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listPads',
    tags=['pad_management', 'group_and_author_pads', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_pads_using_p_o_s_t(group_i_d: Optional[str] = Query(None, alias='groupID')):
    """
    returns all pads of this group
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listPadsOfAuthor',
    tags=[
        'pad_management',
        'author_management',
        'group_and_author_pads',
        'pad_authorship',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_pads_of_author_using_g_e_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    returns an array of all pads this author contributed to
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listPadsOfAuthor',
    tags=[
        'pad_management',
        'author_management',
        'group_and_author_pads',
        'pad_authorship',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_pads_of_author_using_p_o_s_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    returns an array of all pads this author contributed to
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listSavedRevisions',
    tags=['pad_management', 'pad_information_retrieval', 'pad_attribute_access'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_saved_revisions_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listSavedRevisions',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_saved_revisions_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listSessionsOfAuthor',
    tags=[
        'session_management',
        'author_management',
        'pad_sessions',
        'author_information',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_sessions_of_author_using_g_e_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    returns all sessions of an author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listSessionsOfAuthor',
    tags=[
        'session_management',
        'author_management',
        'pad_sessions',
        'author_information',
    ],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_sessions_of_author_using_p_o_s_t(
    author_i_d: Optional[str] = Query(None, alias='authorID')
):
    """
    returns all sessions of an author
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/listSessionsOfGroup',
    tags=['group_management', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_sessions_of_group_using_g_e_t(
    group_i_d: Optional[str] = Query(None, alias='groupID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/listSessionsOfGroup',
    tags=['group_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def list_sessions_of_group_using_p_o_s_t(
    group_i_d: Optional[str] = Query(None, alias='groupID')
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/movePad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def move_pad_using_g_e_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/movePad',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def move_pad_using_p_o_s_t(
    source_i_d: Optional[str] = Query(None, alias='sourceID'),
    destination_i_d: Optional[str] = Query(None, alias='destinationID'),
    force: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/padUsers',
    tags=['pad_users', 'pad_management', 'pad_sessions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def pad_users_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the list of users that are currently editing this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/padUsers',
    tags=['pad_users', 'pad_management', 'pad_sessions'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def pad_users_using_p_o_s_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the list of users that are currently editing this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/padUsersCount',
    tags=['pad_users', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def pad_users_count_using_g_e_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the number of user that are currently editing this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/padUsersCount',
    tags=['pad_users', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def pad_users_count_using_p_o_s_t(pad_i_d: Optional[str] = Query(None, alias='padID')):
    """
    returns the number of user that are currently editing this pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/restoreRevision',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def restore_revision_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/restoreRevision',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def restore_revision_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/saveRevision',
    tags=['pad_management', 'pad_information_retrieval'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def save_revision_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/saveRevision',
    tags=['pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def save_revision_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), rev: Optional[str] = None
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sendClientsMessage',
    tags=['chat_message_handling', 'client_messages'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def send_clients_message_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), msg: Optional[str] = None
):
    """
    sends a custom message of type msg to the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sendClientsMessage',
    tags=['chat_message_handling', 'client_messages', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def send_clients_message_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), msg: Optional[str] = None
):
    """
    sends a custom message of type msg to the pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setHTML',
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_h_t_m_l_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), html: Optional[str] = None
):
    """
    sets the text of a pad with HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setHTML',
    tags=['pad_text_management', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_h_t_m_l_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), html: Optional[str] = None
):
    """
    sets the text of a pad with HTML
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setPublicStatus',
    tags=['pad_public_status_management', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_public_status_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    public_status: Optional[str] = Query(None, alias='publicStatus'),
):
    """
    sets a boolean for the public status of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setPublicStatus',
    tags=['pad_public_status_management', 'pad_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_public_status_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'),
    public_status: Optional[str] = Query(None, alias='publicStatus'),
):
    """
    sets a boolean for the public status of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/setText',
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_text_using_g_e_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    """
    sets the text of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/setText',
    tags=['pad_management', 'pad_text_management'],
    security=[
        APIKeyQuery(name="apikey"),
    ],
)
def set_text_using_p_o_s_t(
    pad_i_d: Optional[str] = Query(None, alias='padID'), text: Optional[str] = None
):
    """
    sets the text of a pad
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
